package ${currentClass.packageName};

import ${mainModelClass.qualifiedName};
import org.springframework.beans.factory.annotation.Autowired;
#if(${requestModelClass.simpleName} != ${mainModelClass.simpleName})## A
#if($requestModelClass != $null)## A-1
import ${requestModelClass.qualifiedName};
#end## A-1
#if(${resultModelClass.simpleName} != ${mainModelClass.simpleName} && ${resultModelClass.simpleName} != ${requestModelClass.simpleName})## A-2
import ${resultModelClass.qualifiedName};
#end## A-2
#elseif(${resultModelClass.simpleName} != ${mainModelClass.simpleName})## A
import ${resultModelClass.qualifiedName};
#end## A
import ${repositoryClass.qualifiedName};
import ${serviceClass.qualifiedName};
import org.springframework.stereotype.Service;
#foreach ($importType in $currentClass.dynamicImports)## A
import ${importType};
#end## A
import java.util.*;

@Service
public class ${currentClass.simpleName} implements ${serviceClass.simpleName} {

    @Autowired
    ${repositoryClass.simpleName} ${mainModel.camelCaseModelName}Repository;

#if($readDefinition != $null)## A
#if(!$readDefinition.singleResult)## A-1
    @Override
#if($requestModelClass != $null)## A-1-1
    public List<${resultModelClass.simpleName}> ${readDefinition.functionName}(${requestModelClass.simpleName} #toLowerCamelCase(${requestModelClass.simpleName})) {
#else## A-1-1
    public List<${resultModelClass.simpleName}> ${readDefinition.functionName}(#foreach($requestParamField in $readDefinition.requestParamFields)#getJavaTypeSimpleName(${requestParamField.javaType}) $requestParamField.property#{if}( !$foreach.last ), #end#end) {
#end## A-1-1
        //todo query
        return null;
    }
#else## A-1
    @Override
#if($requestModelClass != $null)## A-1-1
    public ${resultModelClass.simpleName} ${readDefinition.functionName}(${requestModelClass.simpleName} #toLowerCamelCase(${requestModelClass.simpleName})) {
#else## A-1-1
    public ${resultModelClass.simpleName} ${readDefinition.functionName}(#foreach($requestParamField in $readDefinition.requestParamFields)#getJavaTypeSimpleName(${requestParamField.javaType}) $requestParamField.property#{if}( !$foreach.last ), #end#end) {
#end## A-1-1
        //todo query
        return null;
    }
#end## A-1

#end## A
#if($createDefinition != $null)## A
    @Override
    public void ${createDefinition.functionName}(${mainModelClass.simpleName} ${mainModel.camelCaseModelName}) {
        ${mainModel.camelCaseModelName}Repository.save(${mainModel.camelCaseModelName});
    }

#end## A
#if($updateDefinition != $null)## A
    @Override
    public void ${updateDefinition.functionName}(${mainModelClass.simpleName} ${mainModel.camelCaseModelName}) {
        ${mainModel.camelCaseModelName}Repository.save(${mainModel.camelCaseModelName});
    }

#end## A
#if($deleteDefinition != $null)## A
    @Override
    public void ${deleteDefinition.functionName}(#getJavaTypeSimpleName(${mainModel.primaryKeyField.javaType}) $mainModel.primaryKeyField.property) {
        ${mainModel.camelCaseModelName}Repository.deleteById(${mainModel.primaryKeyField.property});
    }

#end## A
}




