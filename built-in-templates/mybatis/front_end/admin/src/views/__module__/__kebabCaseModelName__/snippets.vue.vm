<script setup lang="ts">
#set($functions = [])
#if($readDefinition != $null)## A
#if($functions.add(${readDefinition.functionName}))#end
#end## A
#if($createDefinition != $null)## A
#if($functions.add(${createDefinition.functionName}))#end
#end## A
#if($updateDefinition != $null)## A
#if($functions.add(${updateDefinition.functionName}))#end
#end## A
#if($deleteDefinition != $null)## A
#if($functions.add(${deleteDefinition.functionName}))#end
#end## A
import ${mainModel.camelCaseModelName}Apis from '@/$myTool.pathOf("src").relativize($myTool.relativePathOf("FRONTEND_API")).trimExt()'

const { #foreach ($functionName in $functions)${functionName}#if( !$foreach.last ),#end#end } = ${mainModel.camelCaseModelName}Apis## A


#if($createDefinition != $null || $updateDefinition != $null)## A
// Dialog for `Add` or `Edit`
const dialogVisible = ref(false)
const dialogUseFor: Ref<'add' | 'edit' | undefined> = ref()
const dialogTitle = ref('')
const ${mainModel.camelCaseModelName}Form = useTemplateRef('${mainModel.kebabCaseModelName}-form')
const ${mainModel.camelCaseModelName}FormModel: Ref<Record<string, any>> = ref({})
#end## A



#if($createDefinition != $null)## A
//Popup the dialog for creation
function handleAdd${mainModel.modelName}(row: any) {
  reset${mainModel.modelName}Form()
  if(row){
    ${mainModel.camelCaseModelName}FormModel.value = row
  }
  dialogTitle.value = 'Add ${mainModel.description}'
  dialogUseFor.value = 'add'
  dialogVisible.value = true
}

#end## A
#if($updateDefinition != $null)## A
//Popup the dialog for modification
function handleEdit${mainModel.modelName}(row: any) {
  reset${mainModel.modelName}Form()
  ${mainModel.camelCaseModelName}FormModel.value = row
  dialogTitle.value = 'Edit ${mainModel.description}'
  dialogUseFor.value = 'edit'
  dialogVisible.value = true
}

#end## A
#if($createDefinition != $null || $updateDefinition != $null)## A
//Submit the form for `Create` or `Update`
function submit${mainModel.modelName}Form() {
  ${mainModel.camelCaseModelName}Form.value?.validate((pass: boolean) => {
    if (pass) {
      if(dialogUseFor.value == 'add'){
        axiosInst.request({...${createDefinition.functionName}, data: ${mainModel.camelCaseModelName}FormModel.value }).then((res) => {
          dialogVisible.value = false
          ElMessage({
            message: 'Created successfully',
            type: 'success',
          })
        });
      }else if(dialogUseFor.value == 'edit') {
        axiosInst.request({...${updateDefinition.functionName}, data: ${mainModel.camelCaseModelName}FormModel.value }).then((res) => {
          dialogVisible.value = false
          ElMessage({
            message: 'Modified successfully',
            type: 'success',
          })
        });
      }
    }
  })
}

// Reset the form for `Create` or `Update`
function reset${mainModel.modelName}Form() {
  ${mainModel.camelCaseModelName}Form.value?.resetFields()
  ${mainModel.camelCaseModelName}FormModel.value = {}
}

// Cancel the submit for `Create` or `Update`
function cancel${mainModel.modelName}Form(){
  reset${mainModel.modelName}Form()
  dialogVisible.value = false
}

#end## A
</script>

<template>
  <div>
#if($createDefinition != $null)## A
    <el-button
      type="primary"
      plain
      icon="el-icon-plus"
      size="small"
      @click="handleAdd${mainModel.modelName}"
    >Add</el-button>
#end## A
#if($updateDefinition != $null)## A
    <el-button link type="primary" icon="el-icon-edit" @click="handleEdit${mainModel.modelName}(scope.row)">Edit</el-button>
#end## A


    <!-- Dialog for `Add` or `Edit` -->
    <el-dialog :title="dialogTitle" v-model="dialogVisible" width="500px" append-to-body>
      <el-form ref="${mainModel.kebabCaseModelName}-form" :model="${mainModel.camelCaseModelName}FormModel" label-position="left" require-asterisk-position="right" label-width="100px">
        <el-row :gutter="10" type="flex">
#set($uniqueFormFields = [])
#if($createDefinition != $null)## A
#set($uniqueFormFields = $createDefinition.formFields)
#end## A
#if($updateDefinition != $null)## A
#if($createDefinition != $null)## A-1
#set($uniqueFormFields = $myTool.deduplicate($uniqueFormFields, $updateDefinition.formFields))
#else## A-1
#set($uniqueFormFields = $updateDefinition.formFields)
#end## A-1
#end## A
#foreach ($field in $uniqueFormFields)## A
#if($field.primaryKey == false)## A-1
#if($createDefinition.formFields.contains($field) || $updateDefinition.formFields.contains($field))## A-1-1
#if($createDefinition.formFields.contains($field) && $updateDefinition.formFields.contains($field))## A-1-1-1
            <el-col :span="${field.formProperties.span}">
#elseif($createDefinition.formFields.contains($field))## A-1-1-1
            <el-col v-if="dialogUseFor == 'add'" :span="${field.formProperties.span}">
#elseif($updateDefinition.formFields.contains($field))## A-1-1-1
            <el-col v-if="dialogUseFor == 'edit'" :span="${field.formProperties.span}">
#end## A-1-1-1
                <el-form-item label="$field.label" prop="${field.property}">
#set($fieldValueType=$myTool.getTsTypeForJavaType($field.javaType))
#if($fieldValueType == "boolean")## A-1-1-2
#if($field.formProperties.editable)## A-1-1-2-1
                  <el-switch v-model="${mainModel.camelCaseModelName}FormModel.${field.property}" />
#else## A-1-1-2-1
                  <el-switch v-model="${mainModel.camelCaseModelName}FormModel.${field.property}" :disabled="dialogUseFor == 'edit'" />
#end## A-1-1-2-1
#elseif($fieldValueType == "Date")## A-1-1-2
#if($field.format == "TIME")## A-1-1-2-1
#if($field.formProperties.editable)## A-1-1-2-1-1
                  <el-time-picker
                    v-model="${mainModel.camelCaseModelName}FormModel.${field.property}"
                    clearable
                    format="HH:mm:ss"
                    value-format="HH:mm:ss.SSSZ"
                    placeholder="Pick ${field.label}"
                  />
#else## A-1-1-2-1-1
                  <el-time-picker
                    v-model="${mainModel.camelCaseModelName}FormModel.${field.property}"
                    clearable
                    :disabled="dialogUseFor == 'edit'"
                    format="HH:mm:ss"
                    value-format="HH:mm:ss.SSSZ"
                    placeholder="Pick ${field.label}"
                  />
#end## A-1-1-2-1-1
#elseif($field.format == "DATE")## A-1-1-2-1
#if($field.formProperties.editable)## A-1-1-2-1-1
                  <el-date-picker
                    v-model="${mainModel.camelCaseModelName}FormModel.${field.property}"
                    type="date"
                    clearable
                    format="YYYY-MM-DD"
                    value-format="YYYY-MM-DD"
                    placeholder="Pick ${field.label}"
                  >
                  </el-date-picker>
#else## A-1-1-2-1-1
                  <el-date-picker
                    v-model="${mainModel.camelCaseModelName}FormModel.${field.property}"
                    type="date"
                    clearable
                    :disabled="dialogUseFor == 'edit'"
                    format="YYYY-MM-DD"
                    value-format="YYYY-MM-DD"
                    placeholder="Pick ${field.label}"
                  >
                  </el-date-picker>
#end## A-1-1-2-1-1
#else## A-1-1-2-1
#if($field.formProperties.editable)## A-1-1-2-1-1
                  <el-date-picker
                    v-model="${mainModel.camelCaseModelName}FormModel.${field.property}"
                    type="datetime"
                    clearable
                    format="YYYY-MM-DD HH:mm:ss"
                    value-format="YYYY-MM-DDTHH:mm:ss.SSSZ"
                    placeholder="Pick ${field.label}"
                  >
                  </el-date-picker>
#else## A-1-1-2-1-1
                  <el-date-picker
                    v-model="${mainModel.camelCaseModelName}FormModel.${field.property}"
                    type="datetime"
                    clearable
                    :disabled="dialogUseFor == 'edit'"
                    format="YYYY-MM-DD HH:mm:ss"
                    value-format="YYYY-MM-DDTHH:mm:ss.SSSZ"
                    placeholder="Pick ${field.label}"
                  >
                  </el-date-picker>
#end## A-1-1-2-1-1
#end## A-1-1-2-1
#else## A-1-1-2
#if($field.formProperties.inputType == "select")## A-1-1-2-1
#if($field.formProperties.editable)## A-1-1-2-1-1
                  <el-select v-model="${mainModel.camelCaseModelName}FormModel.${field.property}" style="width: 100%" clearable placeholder="Input ${field.label}">
                    <!-- <el-option label="" value=""> </el-option> -->
                  </el-select>
#else## A-1-1-2-1-1
                  <el-select v-model="${mainModel.camelCaseModelName}FormModel.${field.property}" style="width: 100%" clearable :disabled="dialogUseFor == 'edit'" placeholder="Input ${field.label}">
                    <!-- <el-option label="" value=""> </el-option> -->
                  </el-select>
#end## A-1-1-2-1-1
#elseif($fieldValueType == "number")## A-1-1-2-1
#if($field.formProperties.editable)## A-1-1-2-1-1
                  <el-input v-model="${mainModel.camelCaseModelName}FormModel.${field.property}" :formatter="(value: string) => `${value}`.replace(/[^\d\.]/g, '')" :parser="(value: string) => `${value}`.replace(/[^\d\.]/g, '')" placeholder="Input ${field.label}"></el-input>
#else## A-1-1-2-1-1
                  <el-input v-model="${mainModel.camelCaseModelName}FormModel.${field.property}" :formatter="(value: string) => `${value}`.replace(/[^\d\.]/g, '')" :parser="(value: string) => `${value}`.replace(/[^\d\.]/g, '')" :disabled="dialogUseFor == 'edit'" placeholder="Input ${field.label}"></el-input>
#end## A-1-1-2-1-1
#elseif($fieldValueType == "string")## A-1-1-2-1
#if($field.formProperties.editable)## A-1-1-2-1-1
                  <el-input v-model="${mainModel.camelCaseModelName}FormModel.${field.property}" placeholder="Input ${field.label}"></el-input>
#else## A-1-1-2-1-1
                  <el-input v-model="${mainModel.camelCaseModelName}FormModel.${field.property}" :disabled="dialogUseFor == 'edit'" placeholder="Input ${field.label}"></el-input>
#end## A-1-1-2-1-1
#end## A-1-1-2-1
#end## A-1-1-2
                </el-form-item>
            </el-col>
#end## A-1-1
#end## A-1
#end## A
        </el-row>
      </el-form>

      <div slot="footer" class="dialog-footer">
        <el-button type="primary" @click="submit${mainModel.modelName}Form">Confirm</el-button>
        <el-button @click="cancel${mainModel.modelName}Form">Cancel</el-button>
      </div>
    </el-dialog>
  </div>
</template>

<style>
</style>